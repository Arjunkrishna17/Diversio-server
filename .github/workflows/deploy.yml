name: Diversio server deployment
on:
  push:
    branches: [main]
    
env: 
   AWS_REGION: ${{ secrets.AWS_REGION}} 
   REPOSITORY: ${{ secrets.REPOSITORY}} 
   ECS_SERVICE: ${{ secrets.ECS_SERVICE}} 
   ECS_CLUSTER: ${{ secrets.ECS_CLUSTER}} 
   ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION}} 
jobs:
   build:
      name: Build image
      runs-on: ubuntu-latest
      environment: production
      steps:
        - name: Check out code
          uses: actions/checkout@v2

        - name: Setup Node.js environment
          uses: actions/setup-node@v2.5.2
        
        - name: Setup RimRaf  
          run: npm i rimraf
        
        - name: Build with NPM
          run: npm run build

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}} 
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY}} 
            aws-region: ${{ env.AWS_REGION }}
            
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build, tag, and push docker image to Amazon ECR
          id: build-image
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
          run: |
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest .
            docker push $REGISTRY/$REPOSITORY:latest
            echo "::set-output name=image::$REGISTRY/$REPOSITORY:latest"
            
        - name: Download task definition
          run: |
            aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json

        - name: Update the Task Definition
          id: update-task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-definition.json
            container-name: diversio-container
            image: ${{ steps.build-image.outputs.image }}
            
        - name: Deploy Amazon ECS task definition
          run: |
            aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
       
       
       


     
      
  
